{"version":3,"sources":["components/WeatherBox.module.css","api/api.ts","config.js","UI/Input.tsx","assets/images/Half-Moon-Loading.svg","components/WeatherBox.tsx","helpers/functions.ts","App.tsx","index.tsx"],"names":["module","exports","key","api","weatherAPI","query","axios","get","Input","type","onChange","onChangeText","onKeyPress","onEnter","restProps","error","className","spanClassName","e","currentTarget","value","WeatherBox","time","icon","temp","styles","weatherBox","src","Math","round","editTimeString","str","arr","split","day","slice","reverse","join","App","useState","setQuery","weather","setWeather","forecast","setForecast","city","setCity","setError","getWeather","then","res","data","catch","err","list","date","moment","format","placeholder","onClick","name","sys","country","main","wind","speed","humidity","temp_max","temp_min","map","dt_txt","dt","loader","alt","ReactDOM","render","Fragment","document","getElementById"],"mappings":"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","file":"static/js/main.ecf45275.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"weatherBox\":\"WeatherBox_weatherBox__1QAcd\",\"icon\":\"WeatherBox_icon__tgcVV\",\"temp\":\"WeatherBox_temp__3DAQh\"};","import axios from \"axios\";\r\nimport { config } from \"./../config\";\r\nlet key = config.MY_KEY;\r\nconst api = {\r\n  baseURL: \"https://api.openweathermap.org/data/2.5/\",\r\n};\r\nexport const weatherAPI = {\r\n  getCurrentWeather(query: string) {\r\n    return axios.get<WeatherResponseType>(\r\n      `${api.baseURL}weather?q=${query}&units=metric&appid=${key}`\r\n    );\r\n  },\r\n  getWeatherForecast(query: string) {\r\n    return axios.get<ForecastResponseType>(\r\n      `${api.baseURL}forecast?q=${query}&units=metric&appid=${key}`\r\n    );\r\n  },\r\n};\r\n\r\n// Types\r\nexport type ForecastResponseType = {\r\n  cod: string;\r\n  message: number;\r\n  cnt: number;\r\n  list: ListType[];\r\n  city: CityType;\r\n};\r\nexport type ListType = {\r\n  dt: number;\r\n  main: MainType;\r\n  weather: WeatherType[];\r\n  clouds: {\r\n    all: number;\r\n  };\r\n  wind: WindType;\r\n  visibility: number;\r\n  pop: number;\r\n  sys: {\r\n    pod: string;\r\n  };\r\n  dt_txt: string;\r\n};\r\nexport type CityType = {\r\n  id: number;\r\n  name: string;\r\n  coord: CoordType;\r\n  country: string;\r\n  population: number;\r\n  timezone: number;\r\n  sunrise: number;\r\n  sunset: number;\r\n};\r\nexport type WeatherResponseType = {\r\n  coord: CoordType;\r\n  weather: WeatherType[];\r\n  base: number;\r\n  main: MainType;\r\n  visibility: number;\r\n  wind: WindType;\r\n  clouds: CloudsType;\r\n  dt: number;\r\n  sys: SysType;\r\n  timezone: number;\r\n  id: number;\r\n  name: string;\r\n  cod: number;\r\n};\r\n\r\ntype CoordType = {\r\n  lon: number;\r\n  lat: number;\r\n};\r\ntype WeatherType = {\r\n  id: number;\r\n  main: string;\r\n  description: string;\r\n  icon: string;\r\n};\r\ntype MainType = {\r\n  temp: number;\r\n  feels_like: number;\r\n  temp_min: number;\r\n  temp_max: number;\r\n  pressure: number;\r\n  humidity: number;\r\n  sea_level: number;\r\n  grnd_level: number;\r\n};\r\ntype WindType = {\r\n  speed: number;\r\n  deg: number;\r\n  gust: number;\r\n};\r\ntype CloudsType = {\r\n  all: number;\r\n};\r\ntype SysType = {\r\n  type: number;\r\n  id: number;\r\n  country: string;\r\n  sunrise: number;\r\n  sunset: number;\r\n};\r\n","export let config = {\r\n  MY_KEY: \"afe1289e31494c8586cf58e9e25eed17\",\r\n};\r\n","import React, {\n  ChangeEvent,\n  DetailedHTMLProps,\n  InputHTMLAttributes,\n  KeyboardEvent,\n} from \"react\";\nimport \"./Input.css\";\n\ntype DefaultInputPropsType = DetailedHTMLProps<\n  InputHTMLAttributes<HTMLInputElement>,\n  HTMLInputElement\n>;\n\ntype InputPropsType = DefaultInputPropsType & {\n  onChangeText?: (value: string) => void;\n  onEnter?: () => void;\n  error?: string;\n  spanClassName?: string;\n};\n\nconst Input: React.FC<InputPropsType> = ({\n  type,\n  onChange,\n  onChangeText,\n  onKeyPress,\n  onEnter,\n  error,\n  className,\n  spanClassName,\n  ...restProps\n}) => {\n  const onChangeCallback = (e: ChangeEvent<HTMLInputElement>) => {\n    onChange && onChange(e);\n    onChangeText && onChangeText(e.currentTarget.value);\n  };\n  const onKeyPressCallback = (e: KeyboardEvent<HTMLInputElement>) => {\n    onKeyPress && onKeyPress(e);\n    onEnter && e.key === \"Enter\" && onEnter();\n  };\n\n  return (\n    <>\n      <input\n        type={\"text\"}\n        onChange={onChangeCallback}\n        onKeyPress={onKeyPressCallback}\n        className=\"search-input\"\n        {...restProps}\n      />\n    </>\n  );\n};\n\nexport default Input;\n","export default __webpack_public_path__ + \"static/media/Half-Moon-Loading.0771d9af.svg\";","import React from \"react\";\r\nimport styles from \"./WeatherBox.module.css\";\r\nexport const WeatherBox: React.FC<WeatherBoxPropsType> = ({\r\n  time,\r\n  icon,\r\n  temp,\r\n}) => {\r\n  return (\r\n    <div className={styles.weatherBox}>\r\n      <div className={styles.time}>{time}</div>\r\n      <img\r\n        className={styles.icon}\r\n        src={`http://openweathermap.org/img/wn/${icon}@2x.png`}\r\n      ></img>\r\n      <div className={styles.temp}>{Math.round(temp)}Â°C</div>\r\n    </div>\r\n  );\r\n};\r\n\r\n// Types\r\ntype WeatherBoxPropsType = {\r\n  time: string;\r\n  icon: string;\r\n  temp: number;\r\n};\r\n","export const editTimeString = (str: string) => {\r\n  let arr = str.split(\" \");\r\n  let day = arr[0].split(\"-\").slice(1).reverse().join(\".\");\r\n  let time = arr[1].split(\":\").slice(0, -1).join(\":\");\r\n  return `${day} ${time}`;\r\n};\r\n","import moment from \"moment\";\nimport React, { KeyboardEvent, useEffect, useState } from \"react\";\nimport { CityType, ListType, weatherAPI } from \"./api/api\";\nimport \"./App.css\";\nimport Input from \"./UI/Input\";\nimport loader from \"./assets/images/Half-Moon-Loading.svg\";\nimport { WeatherBox } from \"./components/WeatherBox\";\nimport { editTimeString } from \"./helpers/functions\";\n\nfunction App() {\n  const [query, setQuery] = useState(\"\");\n  const [weather, setWeather] = useState<any>({});\n  const [forecast, setForecast] = useState<ListType[]>([]);\n  const [city, setCity] = useState<CityType>();\n  const [error, setError] = useState(\"\");\n\n  const getWeather = () => {\n    weatherAPI\n      .getCurrentWeather(query)\n      .then((res) => {\n        setWeather(res.data);\n        setQuery(\"\");\n        setError(\"\");\n      })\n      .catch((err) => {\n        setError(\"There is no such city. Please, try again.\");\n        setQuery(\"\");\n      });\n    weatherAPI\n      .getWeatherForecast(query)\n      .then((res) => {\n        setForecast(res.data.list);\n        setCity(res.data.city);\n        setQuery(\"\");\n        setError(\"\");\n      })\n      .catch((err) => {\n        setError(\"There is no such city. Please, try again.\");\n        setQuery(\"\");\n      });\n  };\n  const search = (e: KeyboardEvent<HTMLInputElement>) => {\n    if (e.key === \"Enter\") {\n      getWeather();\n    }\n  };\n  const searchHandler = () => {\n    getWeather();\n  };\n  const date = moment().format(\"dddd, MMMM Do\");\n\n  return (\n    <div className=\"app-wrapper\">\n      <main>\n        <div className=\"search-box\">\n          <Input\n            type=\"text\"\n            className=\"search-input\"\n            placeholder=\"Search...\"\n            onChange={(e) => setQuery(e.currentTarget.value)}\n            value={query}\n            onKeyPress={search}\n          />\n          <button onClick={searchHandler}>search</button>\n        </div>\n        {error && <div className=\"error\">{error}</div>}\n        {typeof forecast !== \"undefined\" && typeof city !== \"undefined\" ? (\n          <>\n            <div className=\"location-box\">\n              <div className=\"location\">\n                {weather.name}, {weather.sys.country}\n              </div>\n              <div className=\"date\">{date}</div>\n            </div>\n            <div className=\"main-wrapper\">\n              <div className=\"weather-main\">\n                <img\n                  className=\"icon-main\"\n                  src={`http://openweathermap.org/img/wn/${weather.weather[0].icon}@2x.png`}\n                ></img>\n                <div>\n                  <div className=\"temp-main\">\n                    {Math.round(weather.main.temp)}Â°C\n                  </div>\n                  <div className=\"weather-main\">{weather.weather[0].main}</div>\n                </div>\n              </div>\n\n              <div className=\"descr-main\">\n                <div>\n                  {Math.round(weather.wind.speed)}m/s\n                  <br />\n                  Wind\n                </div>\n                <div>\n                  {weather.main.humidity}%\n                  <br />\n                  Humidity\n                </div>\n                <div>\n                  {Math.round(weather.main.temp_max)}Â°C\n                  <br />\n                  High\n                </div>\n                <div>\n                  {Math.round(weather.main.temp_min)}Â°C\n                  <br />\n                  Low\n                </div>\n              </div>\n            </div>\n            <div className=\"date\">Forecast</div>\n            <div className=\"data-wrapper\">\n              {forecast.map((e) => {\n                return (\n                  <WeatherBox\n                    key={e.dt}\n                    time={editTimeString(e.dt_txt)}\n                    icon={e.weather[0].icon}\n                    temp={e.main.temp}\n                  />\n                );\n              })}\n            </div>\n          </>\n        ) : (\n          <div>\n            <div className=\"start-message\">\n              Enter city name and get current weather and 5 day weather forecast\n            </div>\n            <img className=\"loader\" src={loader} alt=\"\" />\n          </div>\n        )}\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.Fragment>\n    <App />\n  </React.Fragment>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}